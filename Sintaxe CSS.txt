#Sintaxe CSS

Para mudar o comportamento de uma tag HTML

  {tag}
  {
    {declaração}: {valor};
    ...
  }

  // Qualquer instância da tag {tag} será modificada


Para mudar o comportamento de instâncias determinadas de tags HTML, usa-se Class

  # No arquivo HTML

    <{tag} class="{nome_da_classe}">

  #No arquivo CSS

    .{nome_da_classe}
    {
      {declaração}: {valor};
      ...
    }

  // Qualquer instância de tag HTML que tenha a Class {nome_da_classe} será alterada


Para mudar o comportamento de instâncias determinadas de uma tag HTML específica, usa-se Class
  # No arquivo HTML

    <{tag} class="{nome_da_classe}">

  #No arquivo CSS

    {tag}.{nome_da_classe}  // Note que não há espaço antes ou depois de '.'
    {
      {declaração}: {valor};
      ...
    }

  // Apenas as instâncias da tag {tag} que tenham a Class {nome_da_classe} serão alteradas


As modificações a cima também funcionam para classes múltiplas

  # Uma instância que possui mais de uma classe é modificada primeiro por cada classe individualmente e depois por regras das classes juntas (podendo sobrescrever mudanças)

  # No arquivo HTML

  <{tag} class="{nome1} {nome2}"

  #No arquivo CSS

  .{nome1}.{nome2}
  {
    {declaração}: {valor};
    ...
  }
  // Nesse caso, qualquer instância que tenha necessariamente ambas as classes será afetada por essa regra.

  {tag}.{nome1}.{nome2}
  {
  {declaração}: {valor};
  ...
  }
  // Nesse caso, instâncias da tag {tag} que tenham necessariamente ambas as classes serão afetadas por essa regra.


Ao invés de Class, pode-se usar Id também para referenciar uma tag específica (no entanto, só pode haver 1 Id com o mesmo nome no arquivo HTML todo)

  # No arquivo HTML

  <{tag} id="{nome_id}">

  # No arquivo CSS

  #{nome_id}  // Nesse caso, o # é realmente necessário
  {
    {declaração}: {valor};
    ...
  }

  {tag}#{nome_id}
  {
    {declaração}: {valor};
    ...
  }
  // Referencia apenas a tag {tag} que tenha o id {nome_id}


Para modificar elementos que são filhos de outro elemento

  # No arquivo HTML

  <{pai}> <{filho} class="class_filho"> ... </{filho}> </{pai}>

  # No arquivo CSS

  {pai} {filho} // Note o espaço entre os dois elementos
  {
    {declaração}: {valor};
    ...
  }
  // Modifica todos os filhos {filho} de {pai}

  {pai} .{class_filho}
  {
    {declaração}: {valor};
    ...
  }
  // Modifica todos os filhos que possuam a class {class_filho} dentro de {pai}


Para modificar elementos que possuam um atributo

  # No arquivo HTML

  <{tag} {atributo}={valor}>

  # No arquivo CSS

  {tag}[{atributo}]
  {
    {declaração}: {valor};
    ...
  }
  // Modifica todos os elementos {tag} que possuam {atributo} de atributo

  {tag}[{atributo}={valor}]
  {
    {declaração}: {valor};
    ...
  }
  // Modifica todos os elementos {tag} que possuam {atributo}={valor}

  {tag}[{atributo}*={val}]
  {
    {declaração}: {valor};
    ...
  }
  // Modifica todos os elementos {tag} que possuam {atributo} cujo valor de igualdade inclua {val}. Obs: {val} = substring contígua de {valor}

  // Caso hajam duas ou mais regras que referenciem o elemento dessa forma e tenham declarations iguais, a regra escrita posteriormente no Style Sheet sobrescreve as anteriores

  {tag}[{atributo}$={valor}]
  {
    {declaração}: {valor};
    ...
  }
  // Modifica todos os elementos {tag} que possuam {atributo} cujo valor termine com {valor}


Customização Genérica
  {tag}
  {
    box-sizing = border-box;  // Incorpora o padding na width definida
  }


Customização de Texto

  p
  {
    color: slategray;             // Cor
    background-color: slategray;  // Cor de fundo

    text-shadow: 2px 2px lightgray; // Sombra (dist. a direita, dist. abaixo, cor)

    text-decoration: underline; // Formatação
    text-align: center;         // Alinhamento
    text-transform: uppercase;  // Forma do texto

    font-size: 20px;    // Tamanho da fonte
    font-family: arial; // Família da fonte

    line-height: 30px;    // Altura entre as linhas
    letter-spacing: 3px;  // Espaço entre as letras

    column-count: 3;      // Se o texto for extenso, em quantas colunas dividir o texto
    column-gap: 100px;    // Espaço entre as colunas
  }


Customização de Lista

  ul
  {
    white-space: nowrap;  // Elementos adjacentes horizontalmente não sofrerão wrap
  }

  li
  {
    list-style-type: square;  // Qual símbolo antecede o texto
  }


Customização de Imagem

  img
  {
    max-width: 100%;  // Define a maior largura que a imagem pode ocupar na tela (ou em relação a seu pai se ele tiver uma width específica)
  }


Customização Específica

  {tag}
  {
    content: 'uma string';  // Insere-se aquela string se for possível inserir algo
                            // Como em p::after
  }


Border, Margin & Padding

  div
  {
    border-style: solid;    // Estilo da borda ao redor do elemento
    border-width: 4px;      // Tamanho da borda
    border-color: crimson;  // Cor da borda

    border: {border-style} {border-width} {border-color}; // Junção das 3 anteriores

    //  Há border-top, border-bottom, border-left & border-right também, que funcionam como border, mas para uma direção específica

    border-radius: 10px;  // Arredonda as bordas

    outline: none;  // Gera um contorno no elemento
  }

  div
  {
    margin: 20px auto;   // Margem que fica ao redor externo da border
                         // O primeiro valor é a margem vertical e o segundo a margem horizontal
                         // 'auto' significa que qualquer espaço adicional será preenchido
    padding: 20px;  // Padding que fica ao redor interno da border
  }


Posição & Layout

  # Static
  {tag}
  {
    position: static;
  }

  # Relative
  {tag}
  {
    position: relative;
    left: 100px;
    bottom: 100px;  // O elemento se afastará 100px da esquerda & 100px de baixo
  }

  # Absolute
  {tag}
  {
    position: absolute;
    left: 10%; // O elemento se afastará 10% da esquerda do pai e 20% do topo do pai
    top: 20%;  // % é recomendado: a posição relativa se mantém se o pai mudar de tamanho
  }

  # Fixed
  {tag}
  {
    position: fixed;
    z-index: 1; // Controla a posição Z (profundidade), o padrão é 0.
                // Aumentar traz o elemento pra frente, diminuir traz o elemento pro fundo.
  }

  # Sticky
  {tag}
  {
    position: sticky;
    top: 150px; // Quando o elemento estiver 150px afastado do topo,
                // ele deixa de ser static e vira fixed.
  }


Pseudoclasses

  {tag}:{pseudoclass}
  {
    {declaração}: {valor};
    ...
  }


Pseudoelementos

  {tag}::{Pseudoelemento}
  {
    {declaração}: {valor};
    ...
  }


Media Queries

  @media {tipo_de_media} and ({condicao})

  # Ex.: @media screen and (max-width=1400px)
         {
           {declaração}: {valor};
           ...
         }

         // Essa regra será aplicada apenas para dispositivos com tela, cuja tela tenha até 1400px de largura
